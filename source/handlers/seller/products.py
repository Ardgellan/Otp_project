from aiogram import types
from aiogram.dispatcher import FSMContext
from loguru import logger

from source.utils import localizer
from source.keyboard import inline
from loader import db_manager

from source.utils.states.seller_states import ProductInputFlow

async def request_user_for_product_name(call: types.CallbackQuery, state: FSMContext):
    logger.debug("Salam_1")
    await call.message.answer(
        text=localizer.get_user_localized_text(
            user_language_code=call.from_user.language_code,
            text_localization=localizer.message.request_product_name_message,
        ),
        parse_mode=types.ParseMode.HTML,
    )
    await ProductInputFlow.waiting_for_product_name.set()
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞
async def handle_product_name(message: types.Message, state: FSMContext):
    logger.debug("Salam_2")
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    product_name = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(product_name=product_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É ID —Ç–æ–≤–∞—Ä–∞
    await request_user_for_product_id(message, state)


async def request_user_for_product_id(message: types.Message, state: FSMContext):
    logger.debug("Salam_3")
    await message.answer(
        text=localizer.get_user_localized_text(
            user_language_code=message.from_user.language_code,
            text_localization=localizer.message.request_product_id_message,
        ),
        parse_mode=types.ParseMode.HTML,
    )
    logger.debug("Balam_3")
    await ProductInputFlow.waiting_for_product_id.set()
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID —Ç–æ–≤–∞—Ä–∞
async def handle_product_id(message: types.Message, state: FSMContext):
    logger.debug("Salam_4")
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    product_id = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(product_id=product_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É OTP —Ç–æ–≤–∞—Ä–∞
    await request_user_for_product_otp(message, state)


async def request_user_for_product_otp(message: types.Message, state: FSMContext):
    logger.debug("Salam_5")
    await message.answer(
        text=localizer.get_user_localized_text(
            user_language_code=message.from_user.language_code,
            text_localization=localizer.message.request_product_otp_message,
        ),
        parse_mode=types.ParseMode.HTML,
    )
    await ProductInputFlow.waiting_for_product_otp.set()
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ OTP —Ç–æ–≤–∞—Ä–∞
async def handle_product_otp(message: types.Message, state: FSMContext):
    logger.debug("Salam_6")
    # –ü–æ–ª—É—á–∞–µ–º OTP –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    product_otp = message.text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(product_otp=product_otp)

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î
    await add_product_to_db_and_notify(message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_product_to_db_and_notify(message: types.Message, state: FSMContext):
    logger.debug("Salam_7")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {data}")

    # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
    try:
        await db_manager.add_product(
            seller_id=message.from_user.id,
            product_name=data['product_name'],
            product_id=data['product_id'],
            product_otp=data['product_otp']
        )
        logger.info(f"–¢–æ–≤–∞—Ä {data['product_name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —É—Å–ø–µ—à–Ω–æ.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        await message.answer(
            text=localizer.get_user_localized_text(
                user_language_code=message.from_user.language_code,
                text_localization=localizer.message.product_successfully_added_message
            ),
            parse_mode=types.ParseMode.HTML,
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å FSM
        await state.finish()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î: {e}")
        await message.answer(
            text=localizer.get_user_localized_text(
                user_language_code=message.from_user.language_code,
                text_localization=localizer.message.error_adding_product_message
            ),
            parse_mode=types.ParseMode.HTML,
        )
        await state.finish()


async def show_product_info(call: types.CallbackQuery, state: FSMContext):
    try:
        logger.debug(f"Received callback data: {call.data}")

        product_id_str = call.data.split("_")[1]
        logger.debug(f"Extracted product_id: {product_id_str}")

        product_id = int(product_id_str)
        product = await db_manager.get_product_by_id(product_id)

        logger.debug(f"Product fetch result: {product}")

        if product:
            text = (
                f"üõí <b>{product['product_name']}</b>\n"
                f"üÜî ID: <code>{product['product_id']}</code>\n"
                f"üîê OTP: <code>{product['product_otp']}</code>\n"
                f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product['created_at'].strftime('%Y-%m-%d %H:%M')}"
            )
        else:
            text = "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
            logger.warning(f"Product with ID {product_id} not found in database.")

        await call.answer()
        await call.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=await inline.specific_product_keyboard(
                language_code=call.from_user.language_code,
                product_id=product_id
            )
        )

    except Exception as e:
        logger.error(f"Exception in show_product_info: {e}", exc_info=True)
        await call.answer()
        await call.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.")



# async def edit_product_info(call: types.CallbackQuery, state: FSMContext):


async def confirm_delete_product(call: types.CallbackQuery, state: FSMContext):
    logger.debug("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 1")
    # await call.message.delete()
    product_id = call.data.split("_")[-1]
    logger.debug("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2")
    await call.message.answer(
        text=localizer.get_user_localized_text(
            user_language_code=call.from_user.language_code,
            text_localization=localizer.message.confirm_delete_product_message,
        ),
        parse_mode=types.ParseMode.HTML,
        reply_markup=await inline.confirm_delete_product_keyboard(
            product_id=product_id, language_code=call.from_user.language_code
        ),
    )
    logger.debug("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 3")



async def delete_product(call: types.CallbackQuery, state: FSMContext):
    logger.debug("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "delete_12345")
        product_id = call.data.split("_")[1]

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ delete_product_by_id)
        await db_manager.delete_product_by_id(
            seller_id=call.from_user.id,
            product_id=product_id
        )
        logger.info(f"–¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await call.message.edit_text(
            text=localizer.get_user_localized_text(
                user_language_code=call.from_user.language_code,
                text_localization=localizer.message.product_successfully_deleted_message,
            ),
            parse_mode=types.ParseMode.HTML,
            reply_markup=await inline.insert_button_back_to_main_menu(language_code=language_code)
        )
        await call.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await call.message.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=types.ParseMode.HTML,
        )
        await call.answer()